/*
 * Wishlist Service
 *
 * API for managing wishlists
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = wishlist.Client.OpenAPIDateConverter;

namespace wishlist.Model
{
    /// <summary>
    /// WishlistCreateWishlistRequest
    /// </summary>
    [DataContract(Name = "wishlistCreateWishlistRequest")]
    public partial class WishlistCreateWishlistRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Privacy
        /// </summary>
        [DataMember(Name = "privacy", IsRequired = true, EmitDefaultValue = true)]
        public WishlistPrivacy Privacy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WishlistCreateWishlistRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WishlistCreateWishlistRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WishlistCreateWishlistRequest" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId (required).</param>
        /// <param name="privacy">privacy (required).</param>
        /// <param name="label">label.</param>
        /// <param name="description">description.</param>
        /// <param name="customerGrn">If the customer GRN is set on JWT, it will be used as default. Otherwise, it will be used the customer_grn field..</param>
        /// <param name="isDefault">isDefault.</param>
        public WishlistCreateWishlistRequest(string tenantId = default(string), WishlistPrivacy privacy = default(WishlistPrivacy), WishlistLocalizedText label = default(WishlistLocalizedText), WishlistLocalizedText description = default(WishlistLocalizedText), string customerGrn = default(string), bool isDefault = default(bool))
        {
            // to ensure "tenantId" is required (not null)
            if (tenantId == null)
            {
                throw new ArgumentNullException("tenantId is a required property for WishlistCreateWishlistRequest and cannot be null");
            }
            this.TenantId = tenantId;
            this.Privacy = privacy;
            this.Label = label;
            this.Description = description;
            this.CustomerGrn = customerGrn;
            this.IsDefault = isDefault;
        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", IsRequired = true, EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = false)]
        public WishlistLocalizedText Label { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public WishlistLocalizedText Description { get; set; }

        /// <summary>
        /// If the customer GRN is set on JWT, it will be used as default. Otherwise, it will be used the customer_grn field.
        /// </summary>
        /// <value>If the customer GRN is set on JWT, it will be used as default. Otherwise, it will be used the customer_grn field.</value>
        [DataMember(Name = "customerGrn", EmitDefaultValue = false)]
        public string CustomerGrn { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name = "isDefault", EmitDefaultValue = true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WishlistCreateWishlistRequest {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  Privacy: ").Append(Privacy).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CustomerGrn: ").Append(CustomerGrn).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
