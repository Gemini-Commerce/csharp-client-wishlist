/*
 * Wishlist Service
 *
 * API for managing wishlists
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = wishlist.Client.OpenAPIDateConverter;

namespace wishlist.Model
{
    /// <summary>
    /// WishlistBulkRemoveItemsFromWishlistsRequest
    /// </summary>
    [DataContract(Name = "wishlistBulkRemoveItemsFromWishlistsRequest")]
    public partial class WishlistBulkRemoveItemsFromWishlistsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WishlistBulkRemoveItemsFromWishlistsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WishlistBulkRemoveItemsFromWishlistsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WishlistBulkRemoveItemsFromWishlistsRequest" /> class.
        /// </summary>
        /// <param name="tenantId">tenantId (required).</param>
        /// <param name="itemGrns">Item GRNs to remove from wishlists. Max 500 items per request. (required).</param>
        /// <param name="wishlistIds">Wishlist IDs to remove items from. Max 500 wishlists per request. If not provided, items will be removed from all wishlists..</param>
        public WishlistBulkRemoveItemsFromWishlistsRequest(string tenantId = default(string), List<string> itemGrns = default(List<string>), List<string> wishlistIds = default(List<string>))
        {
            // to ensure "tenantId" is required (not null)
            if (tenantId == null)
            {
                throw new ArgumentNullException("tenantId is a required property for WishlistBulkRemoveItemsFromWishlistsRequest and cannot be null");
            }
            this.TenantId = tenantId;
            // to ensure "itemGrns" is required (not null)
            if (itemGrns == null)
            {
                throw new ArgumentNullException("itemGrns is a required property for WishlistBulkRemoveItemsFromWishlistsRequest and cannot be null");
            }
            this.ItemGrns = itemGrns;
            this.WishlistIds = wishlistIds;
        }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", IsRequired = true, EmitDefaultValue = true)]
        public string TenantId { get; set; }

        /// <summary>
        /// Item GRNs to remove from wishlists. Max 500 items per request.
        /// </summary>
        /// <value>Item GRNs to remove from wishlists. Max 500 items per request.</value>
        [DataMember(Name = "itemGrns", IsRequired = true, EmitDefaultValue = true)]
        public List<string> ItemGrns { get; set; }

        /// <summary>
        /// Wishlist IDs to remove items from. Max 500 wishlists per request. If not provided, items will be removed from all wishlists.
        /// </summary>
        /// <value>Wishlist IDs to remove items from. Max 500 wishlists per request. If not provided, items will be removed from all wishlists.</value>
        [DataMember(Name = "wishlistIds", EmitDefaultValue = false)]
        public List<string> WishlistIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WishlistBulkRemoveItemsFromWishlistsRequest {\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  ItemGrns: ").Append(ItemGrns).Append("\n");
            sb.Append("  WishlistIds: ").Append(WishlistIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
